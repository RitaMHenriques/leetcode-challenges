// Find Subsequence of Length K With the Largest Sum
// You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.
// Return any such subsequence as an integer array of length k.
// A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        vector<int> subsequence;

        for(int i=0; i<nums.size(); i++){
            if(subsequence.empty())
                subsequence.push_back(nums[i]);
            else if(subsequence.size() < k){
                subsequence.push_back(nums[i]);
            } else {
                int lower = subsequence[0];
                int lowerIndex = 0;
                for(int j=1; j<subsequence.size(); j++){
                    // encontrar nr mais baixo
                    if(lower > subsequence[j]){
                        lower = subsequence[j];
                        lowerIndex = j;
                    }
                }
                if(nums[i] > lower){
                    subsequence.erase(subsequence.begin()+lowerIndex);
                    subsequence.push_back(nums[i]);
                }
            }
        }

        return subsequence;
    }
};
